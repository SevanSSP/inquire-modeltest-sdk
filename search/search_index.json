{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the documentation Inquire Model Test Python SDK","text":""},{"location":"#about","title":"About","text":"<p>A Python software developer kit (SDK) for the Inquire Model Test API by Sevan.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Pip-install package from packagr. <pre><code>pip install modeltestSDK --extra-index-url https://api.packagr.app/EYvhW6SyL/\n</code></pre></p>"},{"location":"#set-up-environmental-variables","title":"Set up environmental variables","text":"<ul> <li>INQUIRE_MODELTEST_API_USER</li> <li>INQUIRE_MODELTEST_API_PASSWORD</li> <li>INQUIRE_MODELTEST_API_HOST</li> </ul> <p>Where</p> <ul> <li>USER is you Inquire Model Test DB username, e.g \"user\"</li> <li>PASSWORD is your password, e.g \"pass\", and </li> <li>HOST is the API host, e.g \"http://127.0.0.1:8000\", when hosting locally</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3, version 3.8.0 or later</li> </ul>"},{"location":"caching/","title":"Caching","text":"<p>Caching of timeseries data points is supported </p>"},{"location":"caching/#usage","title":"Usage","text":"<p>The timeseries.get_data_points accepts a cache boolean which enables storing and extracting data  from a cache instead of getting the data from the API. By default, caching is enabled (True).</p> <p>The example below shows and times</p> <ul> <li>Getting data from API</li> <li>Getting data from API and storing it in cache</li> <li>Getting data from cache</li> </ul> <pre><code>\"\"\"\nUsing caching and timing get_data_point with and without caching\n\"\"\"\n\nfrom modeltestsdk import Client\nimport time\nclient = Client()\n\n\n# timeseries id\nts_id = UUID\n\n\n# Timing get_data_points without caching\nt = time.time()\nts_data = client.timeseries.get_data_points(ts_id=ts_id, all_data=True, cache=False)\nelapsed = time.time() - t\n\nprint(f'Get, no caching: {elapsed} s')\n\n# Timing get_data_points with caching, storing the results to sqlite\nt = time.time()\nts_data = client.timeseries.get_data_points(ts_id=ts_id, all_data=True)\nelapsed = time.time() - t\n\nprint(f'Get, with caching: {elapsed} s')\n\n# Timing get_data_points with caching, extracting the results from sqlite\nt = time.time()\nts_data = client.timeseries.get_data_points(ts_id=ts_id, all_data=True)\nelapsed = time.time() - t\n\nprint(f'Get from cache: {elapsed} s')\n</code></pre> <p>This behaviour assumes that the specific time series has not been cached previously</p>"},{"location":"caching/#cache-expiration-and-clearing","title":"Cache expiration and clearing","text":"<p>The cache is set with an expiry time of 7 days. Data is now explicitly deleted after 7 days, but a new call of get_data_points will replace the existing data.</p> <p>Note</p> <p>Caching is related to the API call. Modified data behind the same API call will not be availble if the API  call has been cached (and not expired). </p> <p>Note</p> <p>It is good practise to clear the cache when new data is posted</p> <p>The cache can be manually cleared by the client's clear_cache() method  </p> <pre><code>\"\"\"\nClearing cache example\n\"\"\"\n\nfrom modeltestsdk import Client\nclient = Client()\n\n# clearing cache\nclient.clear_cache()\n</code></pre>"},{"location":"caching/#under-the-hood","title":"Under the hood","text":"<p>The SDK will establish a SQLite file (mtdb.sqlite) in a local cache folder </p> <ul> <li>C:\\Users\\user\\AppData\\Local\\ for Windows</li> <li>/home/user/.cache/ for Linux, </li> <li>/Users/user/Library/Caches/ for macOS</li> </ul> <p>Note</p> <p>Deleting this file will remove all cached data, but not affect the modeltestSDK otherwise.</p>"},{"location":"coordinates/","title":"Coordinate Systems","text":""},{"location":"coordinates/#convention","title":"Convention","text":"<p>All coordinate systems apply a right-hand convention. </p>"},{"location":"coordinates/#global","title":"Global","text":"<p>Basin-fixed coordinate system with: </p> <ul> <li>origin in the floater center position at the still water line</li> <li>z upwards</li> <li>x towards the wave maker (irrespective of floater heading)</li> </ul> <p>The tags surge, sway, and heave refer to motions in this coordinate system</p>"},{"location":"coordinates/#local-globally-oriented","title":"Local - globally oriented","text":"<p>Body-fixed coordinate system with: </p> <ul> <li>origin in the floater center position at the still water line</li> <li>z upwards</li> <li>x towards the wave maker when floater is in zero position (irrespective of floater heading)</li> </ul> <p>The tags roll, pitch, and yaw refer to motions in this coordinate system.</p>"},{"location":"coordinates/#local","title":"Local","text":"<p>Body-fixed coordinate system with: </p> <ul> <li>origin in the floater center, baseline elevation</li> <li>z upwards</li> <li>x towards local direction corresponding to towards wave maker at heading zero </li> </ul> <p>Local sensor position are given in this coordinate system. Floater heading is defined as the </p>"},{"location":"coordinates/#basin","title":"Basin","text":"<p>Basin coordinate systems are dependent on the basin standard and the test specification Sensors may record motions in the basin coordinate system, but the definition of the positive direction will be given in one of the other coordinate systems. </p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic","title":"Basic","text":"<p>Initiate API client and fetch all available campaigns.</p> <pre><code>\"\"\"\nBasic example showing how to initiate the client and list available model test campaigns.\n\"\"\"\nfrom modeltestsdk import Client\n\n\nclient = Client()\ncampaigns = client.campaign.get()\n</code></pre> <p>Note</p> <p>the get_all() method was previously used to return several results</p>"},{"location":"examples/#create-campaign","title":"Create campaign","text":"<p>Add a campaign to the database, using datetime to properly handle the date.</p> <pre><code>\"\"\"\nSimple create example\n\"\"\"\nfrom datetime import datetime\nfrom modeltestsdk import Client\n\nclient = Client()\ncampaign = client.campaign.create(name=\"Campaign name\",\n                                  description=\"Campaign description\",\n                                  date=datetime(year=2000, month=1, day=1).isoformat(),\n                                  location=\"Test location\",\n                                  scale_factor=52,\n                                  water_depth=300,\n                                  read_only=True)\n</code></pre>"},{"location":"examples/#get-campaign","title":"Get campaign","text":"<p>This example will filter by campaign name and description and sort ascending by date. The filter object enables use of Pythonic syntax </p> <pre><code>\"\"\"\nSimple example using the sort and filter objects\n\"\"\"\nfrom modeltestsdk import Client\nclient = Client()\n\ncampaigns = client.campaign.get(filter_by=[\n     client.filter.campaign.name == \"Campaign name\",\n     client.filter.campaign.description == \"Campaign description\"],\n     sort_by=[client.sort.campaign.date.asc])\n</code></pre> <p>Note</p> <p>Filtering and sort arguments needs to be contained inside a list. Sorting will be done in the order the arguments are given in the list</p> <p>Note</p> <p>the get_all() method was previously used to return several results</p>"}]}